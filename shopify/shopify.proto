syntax = "proto3";

package pb;

option go_package = "/pb";

service ShopifyService {
    rpc GetAuthorizationURL(GetAuthorizationURLRequest) returns (GetAuthorizationURLResponse) {};
    rpc ExchangeAccessToken(ExchangeAccessTokenRequest) returns (ExchangeAccessTokenResponse) {};
    rpc GetOrdersForShopAndAccount(GetOrdersForShopAndAccountRequest) returns (GetOrdersForShopAndAccountResponse) {};
    rpc SyncOrders(SyncOrderRequest) returns (SyncOrderResponse) {};
}

// Updated SyncOrder messages for multi-shop support
message SyncOrderRequest {
    string account_id = 1;           // Only need account_id as we'll fetch all shops for this account
}

message ShopSyncStatus {
    bool success = 1;
    string error_message = 2;        // Optional error message if sync failed
    int32 orders_synced = 3;         // Number of orders synced
}

message SyncOrderResponse {
    bool overall_success = 1;        // Overall sync operation success
    map<string, ShopSyncStatus> shop_results = 2;  // Results per shop (shop_name -> status)
    string message = 3;              // Optional message about the sync operation
}
message Order {
    string id = 1;                   // Unique internal identifier of the order
    string account_id = 2;           // Associated account ID
    string shop_id = 3;              // Shopify shop ID
    float total_price = 4;           // Total order price
    string order_id = 5;             // Shopify's native order ID
}





message GetAuthorizationURLRequest {
    string shop_name = 1;
    string state = 2;
}

message GetAuthorizationURLResponse {
    string auth_url = 1;
}

message ExchangeAccessTokenRequest {
    string shop_name = 1;
    string code = 2;
    string account_id= 3;
}

message ExchangeAccessTokenResponse {
    bool success = 1;
}

message GetOrdersForShopAndAccountRequest{
    string shop_name = 1;
    string account_id = 2;
    string token =3;

}

message GetOrdersForShopAndAccountResponse{
    repeated Order orders = 1;

}