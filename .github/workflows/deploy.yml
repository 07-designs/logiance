name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: logilo-cluster-dev
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repositories
        run: |
          services=("graphql" "account" "shopify" "payment" "shipment")  
          for service in "${services[@]}"; do
            echo "Checking or creating repository: $service"
            if aws ecr describe-repositories --repository-names $service >/dev/null 2>&1; then
              echo "Repository $service already exists."
            else
              echo "Creating repository $service."
              aws ecr create-repository \
                --repository-name $service \
                --image-scanning-configuration scanOnPush=true
            fi
          done

      - name: Push images to ECR
        run: |
          services=("graphql" "account" "shopify" "payment" "shipment")  
          for service in "${services[@]}"; do
            echo "Pulling and pushing Docker image for $service..."
            docker pull logilog/$service:latest || {
              echo "Error: Failed to pull image logilog/$service:latest"
              exit 1
            }
            docker tag logilog/$service:latest $ECR_REGISTRY/$service:latest
            docker push $ECR_REGISTRY/$service:latest || {
              echo "Error: Failed to push image for $service"
              exit 1
            }
          done

      - name: Deploy Services
        run: |
          services=("graphql" "account" "shopify" "payment" "shipment")  
          for service in "${services[@]}"; do
            echo "Updating task definition for $service service..."
            
            # Get current task definition
            TASK_DEF=$(aws ecs describe-task-definition \
              --task-definition logilo-${service}-dev \
              --query 'taskDefinition' \
              --output json)
            
            # Update the image in container definitions while preserving other settings
            NEW_TASK_DEF=$(echo $TASK_DEF | jq \
              --arg IMAGE "$ECR_REGISTRY/$service:latest" \
              '.containerDefinitions[0].image = $IMAGE | {
                family: .family,
                taskRoleArn: .taskRoleArn,
                executionRoleArn: .executionRoleArn,
                networkMode: .networkMode,
                containerDefinitions: .containerDefinitions,
                requiresCompatibilities: .requiresCompatibilities,
                cpu: .cpu,
                memory: .memory
              }')

            # Register new task definition
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
              --cli-input-json "$NEW_TASK_DEF" \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)

            echo "Deploying $service service with new task definition: $NEW_TASK_DEF_ARN"

            # Update the service
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${service} \
              --force-new-deployment \
              --task-definition "$NEW_TASK_DEF_ARN" || {
                echo "Error: Failed to update service $service"
                exit 1
              }
          done

      - name: Wait for services to stabilize
        run: |
          services=("graphql" "account" "shopify" "payment" "shipment") 
          for service in "${services[@]}"; do
            echo "Waiting for $service service to stabilize..."
            aws ecs wait services-stable \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${service}-service || {
                echo "Error: $service service failed to stabilize."
                exit 1
              }
            echo "$service service is stable."
          done

      - name: Verify deployment
        run: |
          services=("graphql" "account" "shopify" "payment" "shipment")
          for service in "${services[@]}"; do
            echo "Verifying deployment for ${service}-service..."
            aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${service}-service \
              --query 'services[0].{Status:status,DesiredCount:desiredCount,RunningCount:runningCount}' \
              --output table || {
                echo "Error: Failed to verify deployment for $service"
                exit 1
              }
          done
