# .github/workflows/deploy.yml

name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]  # Triggers on push to main branch
  pull_request:
    branches: [ main ]  # Also run on PRs to main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: logilo  # Your ECR repository prefix

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [graphql, account, payment, shipment, shopify]  # List of your services
        include:
          - service: graphql
            port: 8084
          - service: account
            port: 8081
          - service: payment
            port: 50051
          - service: shipment
            port: 50052
          - service: shopify
            port: 8080

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        SERVICE_NAME: ${{ matrix.service }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-$SERVICE_NAME:$IMAGE_TAG \
          -f ./$SERVICE_NAME/app.dockerfile .
        
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-$SERVICE_NAME:$IMAGE_TAG
        
        # Store image URI for later use
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-$SERVICE_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS service
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        SERVICE_NAME: ${{ matrix.service }}
      run: |
        aws ecs update-service \
          --cluster logilo-cluster-dev \
          --service $SERVICE_NAME-service \
          --force-new-deployment \
          --task-definition $(aws ecs describe-task-definition \
            --task-definition logilo-$SERVICE_NAME-dev \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

    - name: Wait for service stability
      run: |
        aws ecs wait services-stable \
          --cluster logilo-cluster-dev \
          --services ${{ matrix.service }}-service
