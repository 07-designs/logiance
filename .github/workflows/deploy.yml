name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: logilo
  ENVIRONMENT: dev
  ECS_CLUSTER: logilo-cluster-dev

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: ecr-login

      - name: Create ECR repositories
        run: |
          # Define service names consistently
          services=("graphql" "account" "shopify" "payment" "shipment")
          
          for service in "${services[@]}"; do
            repo_name="${service}"
            echo "Checking or creating repository: $repo_name"
            
            if ! aws ecr describe-repositories --repository-names "$repo_name" >/dev/null 2>&1; then
              echo "Creating repository $repo_name"
              aws ecr create-repository \
                --repository-name "$repo_name" \
                --image-scanning-configuration scanOnPush=true \
                --tags Key=Environment,Value=${{ env.ENVIRONMENT }} \
                      Key=Project,Value=${{ env.PROJECT_NAME }}
            fi
          done

      - name: Push images to ECR
        run: |
          ECR_REGISTRY="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          
          # Define service mappings with consistent naming
          declare -A service_mappings=(
            ["graphql"]="graphql"
            ["account"]="account"
            ["shopify"]="shopify"
            ["payment"]="payment"
            ["shipment"]="shipment"
          )

          for service_name in "${!service_mappings[@]}"; do
            docker_image="${{ env.PROJECT_NAME }}/${service_mappings[$service_name]}"
            ecr_repo="$ECR_REGISTRY/${service_name}"
            
            echo "Processing $service_name service"
            
            # Pull from Docker Hub
            if ! docker pull "$docker_image:latest"; then
              echo "Error: Failed to pull image $docker_image:latest"
              exit 1
            fi
            
            # Tag for ECR
            if ! docker tag "$docker_image:latest" "$ecr_repo:latest"; then
              echo "Error: Failed to tag image for ECR"
              exit 1
            fi
            
            # Push to ECR
            if ! docker push "$ecr_repo:latest"; then
              echo "Error: Failed to push image to ECR"
              exit 1
            fi
            
            echo "Successfully processed $service_name service"
          done

      - name: Deploy Services
        run: |
          # Set correct role ARNs based on project name and environment
          TASK_ROLE_ARN="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.PROJECT_NAME }}-task-role-${{ env.ENVIRONMENT }}"
          EXEC_ROLE_ARN="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.PROJECT_NAME }}-task-execution-role-${{ env.ENVIRONMENT }}"

          services=("graphql" "account" "shopify" "payment" "shipment")
          
          for service in "${services[@]}"; do
            echo "Updating task definition for $service..."
            
            TASK_FAMILY="${{ env.PROJECT_NAME }}-${service}-${{ env.ENVIRONMENT }}"
            
            # Get current task definition
            TASK_DEF=$(aws ecs describe-task-definition \
              --task-definition "$TASK_FAMILY" \
              --query 'taskDefinition' \
              --output json)

            # Update the task definition
            NEW_TASK_DEF=$(echo "$TASK_DEF" | jq \
              --arg IMAGE "$ECR_REGISTRY/$service:latest" \
              --arg TASK_ROLE "$TASK_ROLE_ARN" \
              --arg EXEC_ROLE "$EXEC_ROLE_ARN" \
              '.containerDefinitions[0].image = $IMAGE |
              .taskRoleArn = $TASK_ROLE |
              .executionRoleArn = $EXEC_ROLE |
              {
                family: .family,
                taskRoleArn: $TASK_ROLE,
                executionRoleArn: $EXEC_ROLE,
                networkMode: .networkMode,
                containerDefinitions: .containerDefinitions,
                requiresCompatibilities: .requiresCompatibilities,
                cpu: .cpu,
                memory: .memory,
                volumes: (.volumes // []),
                placementConstraints: (.placementConstraints // [])
              }')

            # Register new task definition
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
              --cli-input-json "$NEW_TASK_DEF" \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)

            echo "Registered new task definition: $NEW_TASK_DEF_ARN"

            # Update the service
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service "${service}-service" \
              --task-definition "$NEW_TASK_DEF_ARN" \
              --force-new-deployment

            echo "Deployed $service service with new task definition"
          done

      - name: Wait for services to stabilize
        run: |
          services=("graphql" "account" "shopify" "payment" "shipment")
          
          for service in "${services[@]}"; do
            echo "Waiting for ${service}-service to stabilize..."
            aws ecs wait services-stable \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services "${service}-service"
            echo "${service}-service is stable"
          done

      - name: Verify deployment
        if: always()
        run: |
          services=("graphql" "account" "shopify" "payment" "shipment")
          
          for service in "${services[@]}"; do
            echo "Verifying deployment for ${service}-service..."
            aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services "${service}-service" \
              --query 'services[0].{
                Status: status,
                DesiredCount: desiredCount,
                RunningCount: runningCount,
                PendingCount: pendingCount,
                Events: events[0:3]
              }' \
              --output table
          done
